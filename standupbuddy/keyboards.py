from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from .db import db


def main_menu(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="m:create")],
        [InlineKeyboardButton("üîó –í—Å—Ç—É–ø–∏—Ç—å –ø–æ –∫–æ–¥—É", callback_data="m:join")],
        [InlineKeyboardButton("üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="m:teams")],
    ])


def group_menu_keyboard(team_row, is_manager: bool, self_id: int) -> InlineKeyboardMarkup:
    has_schedule = bool(team_row["reminder_time"])
    btns = []
    if has_schedule:
        btns.append([InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"gm:view:{team_row['id']}")])
        if is_manager:
            btns.append([InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"gm:edit:{team_row['id']}")])
            btns.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"gm:del:{team_row['id']}")])
            btns.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"gm:run:{team_row['id']}")])
    else:
        if is_manager:
            btns.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"gm:edit:{team_row['id']}")])
    btns.append([InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"gm:members:{team_row['id']}")])
    btns.append([InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –≥—Ä—É–ø–ø–µ", callback_data=f"gm:info:{team_row['id']}")])
    btns.append([InlineKeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã", callback_data=f"gm:leave:{team_row['id']}")])
    if is_manager:
        btns.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞‚Ä¶", callback_data=f"gm:rmembers:{team_row['id']}")])
    btns.append([InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="back:teams")])
    btns.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back:menu")])
    return InlineKeyboardMarkup(btns)


def cancel_kb_to_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back:menu")]])


def cancel_kb_to_group():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back:group")]])


def team_choice_keyboard(uid: int) -> InlineKeyboardMarkup:
    conn = db()
    rows = conn.execute(
        "SELECT t.id, t.name FROM teams t JOIN team_members m ON m.team_id=t.id WHERE m.tg_id=? ORDER BY t.id",
        (uid,),
    ).fetchall()
    if not rows:
        return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back:menu")]])
    buttons = [[InlineKeyboardButton(f"{r['name']} (ID {r['id']})", callback_data=f"g:{r['id']}")] for r in rows]
    buttons.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back:menu")])
    return InlineKeyboardMarkup(buttons)


def tz_offset_keyboard() -> InlineKeyboardMarkup:
    rows, row = [], []
    for off in range(-12, 15):
        row.append(InlineKeyboardButton(f"UTC{off:+d}", callback_data=f"tzo:{off}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:group")])
    return InlineKeyboardMarkup(rows)


def schedule_preset_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="sch:preset:everyday")],
        [InlineKeyboardButton("üè¢ –ë—É–¥–Ω–∏ (–ü–Ω‚Äì–ü—Ç)", callback_data="sch:preset:weekdays")],
        [InlineKeyboardButton("üéâ –í—ã—Ö–æ–¥–Ω—ã–µ (–°–±‚Äì–í—Å)", callback_data="sch:preset:weekends")],
        [InlineKeyboardButton("üß© –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–Ω–∏‚Ä¶", callback_data="sch:custom:start")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:group")],
    ])


def schedule_custom_keyboard(selected: set[int]) -> InlineKeyboardMarkup:
    names = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    rows = []
    for i, n in enumerate(names):
        mark = "‚úÖ" if i in selected else "‚òê"
        rows.append([InlineKeyboardButton(f"{mark} {n}", callback_data=f"sch:custom:toggle:{i}")])
    rows.append([InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="sch:custom:save"),
                 InlineKeyboardButton("–°–±—Ä–æ—Å", callback_data="sch:custom:reset")])
    rows.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back:schedule")])
    return InlineKeyboardMarkup(rows)


